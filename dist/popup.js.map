{"version":3,"file":"popup.js","mappingssources":["webpack://reactexten/./src/popup.js"],"sourcesContent":["document.getElementById(\"click-me-button\").addEventListener('click', async function() {\r\n  chrome.tabs.query({ active: true, currentWindow: true }, function(tabs) {\r\n      var activeTab = tabs[0];\r\n      var activeTabId = activeTab.id;\r\n\r\n      chrome.scripting.executeScript({\r\n          target: { tabId: activeTabId },\r\n          function: DOMtoString,\r\n      }).then((result) => {\r\n          var user_mail = result[0].result;\r\n          console.log(user_mail);\r\n          console.log(\"Scraped Content:\", user_mail);\r\n          chrome.runtime.sendMessage({ action: \"scrapedContent\", content: user_mail });\r\n    \r\n      });\r\n  });\r\n});\r\n\r\n\r\nfunction changeColor(destinedButton) {\r\n  const button = document.getElementById(destinedButton);\r\n  button.style.backgroundColor = \"lightblue\";\r\n}\r\n\r\nfunction DOMtoString(selector) {\r\n  var temp_var = document.getElementsByClassName(\"a3s\");\r\n  return temp_var[0].textContent;\r\n}\r\n\r\n\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n\r\n  const scrapeButton = document.getElementById('click-me-button');\r\n  const captureButton=document.getElementById('captureBtn');\r\n  const container= document.getElementById('responseContainer');\r\n  const emailButton = document.getElementById('emailButton');\r\n  let newTabId;  // Store the ID of the new tab\r\n  //emailButton.addEventListener('click', function () {\r\n    // Open Gmail in a new tab\r\n    //chrome.tabs.create({ url: 'http://localhost:7071/api/emailScriptAttack' });\r\n\r\n    // Trigger the Azure API endpoint (replace 'YOUR_AZURE_API_ENDPOINT' with the actual endpoint)\r\n   \r\n  //});\r\n  \r\n\r\n  \r\n \r\n  // Event listener for login or register button click\r\n  document.getElementById('loginButton').addEventListener('click', function () {\r\n    // Open a new tab with the login or registration website\r\n    chrome.tabs.create({ url: 'http://localhost:3000/#' }, function (tab) {\r\n      newTabId = tab.id;  // Store the ID of the new tab\r\n      \r\n    });\r\n  });\r\n\r\n  // Listen for changes in the current tab\r\n  chrome.tabs.onUpdated.addListener(function (tabId, changeInfo) {\r\n    // Check if the change is in the new tab we opened\r\n    \r\n\r\n    if (tabId === newTabId && changeInfo.url) {\r\n      // Once the URL changes, hide the login or register button and show the scrape button\r\n      document.getElementById('loginButton').style.display = 'none';\r\n      scrapeButton.style.display = 'block';\r\n      captureButton.style.display='block';\r\n      \r\n      \r\n      }\r\n      \r\n    \r\n  });\r\n\r\n  // Listen for closure of the registration tab\r\n  chrome.tabs.onRemoved.addListener(function (tabId) {\r\n    // Check if the closed tab is the registration tab\r\n    \r\n\r\n    if (tabId === newTabId) {\r\n      // Hide the login or register button and show the scrape button when the registration tab is closed\r\n      document.getElementById('loginButton').style.display = 'none';\r\n      scrapeButton.style.display = 'block';\r\n      \r\n      captureButton.style.display='block';\r\n      \r\n      \r\n      \r\n       \r\n      \r\n      }\r\n   \r\n});\r\n\r\n\r\n } );\r\n\r\n \r\n  //captureButton.style.display = 'none';\r\n// Listen for messages from background.js\r\nchrome.runtime.onMessage.addListener(function(request) {\r\n  if (request.action === 'apiResponse') {\r\n    // Handle the response from background.js\r\n    if (request.generativeAIResponse) {\r\n      // Update your UI or display the response in the popup\r\n      const responseText = 'Generative AI Response:\\n' + request.generativeAIResponse;\r\n      const alertStyle = `\r\n      color: #ffffff;  /* Text color */\r\n      background-color: #007bff;  /* Background color */\r\n      padding: 10px;\r\n      border-radius: 5px;\r\n    `;\r\n\r\n    // Display the styled alert\r\n    alert(responseText);\r\n     \r\n\r\n      // Highlight keywords on the webpage\r\n      \r\n    const alertContainer = document.querySelector('.alert');\r\n    if (alertContainer) {\r\n      alertContainer.style.cssText = alertStyle;\r\n    }\r\n  } else if (request.error) {\r\n    console.error('Error from background.js:', request.error);\r\n    const errorText = 'Error:\\n' + request.error;\r\n\r\n    // Styling for the alert\r\n    const alertStyle = `\r\n      color:  #003153;  /* Text color */\r\n      background-color: #FFC0CB;  /* Background color */\r\n      padding: 10px;\r\n      border-radius: 5px;\r\n    `;\r\n\r\n    // Display the styled alert\r\n    alert(errorText);\r\n    const alertContainer = document.querySelector('.alert');\r\n    if (alertContainer) {\r\n      alertContainer.style.cssText = alertStyle;\r\n    }\r\n  }\r\n}\r\n});\r\n// Update the UI when the popup is opened\r\n//updateUI();\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n  const captureBtn = document.getElementById('captureBtn');});\r\n  //const responseContainer = document.getElementById('responseContainer');\r\n\r\n  // Establish a connection with the background script\r\n  const port = chrome.runtime.connect({ name: 'popup' });\r\n  \r\n  captureBtn.addEventListener('click', function () {\r\n  // Check if the button is enabled before sending the message\r\n \r\n    // Send a message to the background script to capture the screenshot\r\n    port.postMessage({ action: 'captureScreenshot' });\r\n  });\r\n  \r\n  //captureButton.addEventListener('click', function () {\r\n    // Send a message to the backgroound script to capture the screenshot\r\n   // port.postMessage({ action: 'captureScreenshot' });});\r\n  // Listen for messages from the background script\r\n  port.onMessage.addListener(function (message) {\r\n    if (message.action === 'displayResponse') {\r\n      if (request.response) {\r\n        alert('Generative AI Response:\\n' + request.response);\r\n      } else if (request.error) {\r\n        alert('Error:\\n' + request.error);\r\n      }\r\n        //Display the API response in the popup\r\n       //responseContainer.innerText = JSON.stringify(message.response, null, 2);\r\n       \r\n      //console.log('Received API response:', message.response); // Inspect the response content\r\n      // Call a function to create a popup window with the response\r\n    }\r\n  });\r\n   // Trigger capturing the screenshot when the button is clicked\r\n  //captureBtn.addEventListener('click', function () {\r\n    // Send a message to the background script to capture the screenshot\r\n    //port.postMessage({ action: 'captureScreenshot' });\r\n  //});\r\n//});\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\nchrome.runtime.onMessage.addListener(function (request) {\r\n  if (request.action === 'apiResponses') {\r\n    if (request.generativeAIResponse) {\r\n      const responseText = 'Generative AI Response:\\n' + request.generativeAIResponse;\r\n      \r\n      const alertStyle = `\r\n        color: #ffffff;  /* Text color */\r\n        background-color: #007bff;  /* Background color */\r\n        padding: 10px;\r\n        border-radius: 5px;\r\n      `;\r\n\r\n      alert(responseText);\r\n      \r\n      \r\n      const alertContainer = document.querySelector('.alert');\r\n      if (alertContainer) {\r\n        alertContainer.style.cssText = alertStyle;\r\n      }\r\n      const extractedKeywords = extractKeywords(request.generativeAIResponse);\r\nconsole.log('Extracted Keywords:', extractedKeywords);\r\n\r\n\r\n        \r\n      \r\n    } else if (request.error) {\r\n      // Handle error as needed\r\n      console.error('Error from background.js:', request.error);\r\n    }\r\n  }\r\n  function extractKeywords(text) {\r\n    // Split the text by new line characters\r\n    const lines = text.split(/\\r?\\n/); // Handles both LF (\\n) and CRLF (\\r\\n)\r\n  \r\n    // Find the line starting with \"**Keywords**\" (case-insensitive)\r\n    const keywordsLineIndex = lines.findIndex(line => line.toLowerCase().startsWith(\"**keywords**\"));\r\n  \r\n    // Extract keywords starting from the next line\r\n    const keywords = keywordsLineIndex !== -1 ? lines.slice(keywordsLineIndex + 1) : [];\r\n  \r\n    return keywords.map(line => line.trim());\r\n     // Remove leading/trailing spaces from each keyword\r\n  }\r\n  \r\n  \r\n})});\r\n\r\n\r\n\r\n\r\n\r\n"],"names":[],"sourceRoot":""}